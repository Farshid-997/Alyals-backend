generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  name      String
  email     String       @unique
  password  String
  image     String?
  role      Role        @default(user)
  contactNo String
  address   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  reviews   UserReview[]
  orders    Order[] 
  Payment   Payment[]
  Notification     Notification[]
 Blog             Blog[]
  @@map("user")
}


model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[] // Products belonging to the category
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("category")
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String?
  image        String?
  price        Float // Changed to use Float for price
  Category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   String?
  stock        String?
  productstate String
  quantity     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderProduct OrderProduct[]
  Brand        Brand?      @relation(fields: [brandId], references: [id])
  brandId      String?

  @@map("product")
}


model Brand {
  id   String @id @default(uuid())
  name String
  description String
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  products  Product[]
  @@map("brand")
}

model UserReview {
  id        String   @id @default(uuid())
  rating    String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_review")
}


model Notification {
  id               String           @id @default(uuid())
  title            String
  content          String
  notificationType NotificationType
  isRead           Boolean          @default(false)
  user             User?            @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("notification")
}

model Order {
  id           String         @id @default(uuid())
  userId       String
  totalAmount  Float
  firstName    String
  lastName     String
  status       OrderStatus
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderProduct OrderProduct[] // Use a one-to-many relationship for order products
  address      String
  city         String
  postcode     String
  note         String?
  phone        String
 
  User         User           @relation(fields: [userId], references: [id])
  OrderCount   OrderCount[]
  count        Int            @default(0)
  @@map("order")
}
model OrderCount{
  id           String         @id @default(uuid())
  orderId      String 

  count        Int

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  Order         Order @relation(fields: [orderId], references: [id])

  @@map("orderCounts")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int 

  @@map("order_product")
}

model Payment {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  amount        Float
  paymentStatus PaymentStatus 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payment")
}


model Blog {
  id         String   @id @default(uuid())
  title      String
  content    String
  image      String?
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  authorName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("blog")
}
enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}

enum NotificationType {
  promotional
  normal
  payment
  service
}

enum Role {
  superadmin
  admin
  user
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  canceled
}

enum OrderBookingStatus {
 Received
 notReceived
}
